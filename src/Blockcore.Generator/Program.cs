using System;
using System.Collections.Generic;
using System.Text.Json;
using NBitcoin;

namespace Blockcore.Generator
{
   class GeneratorOutput
   {
      public string Description => "Genesis Blocks Generated by Blockcore Genesis Block Generator v1.0.";
      public string Url => "https://www.blockcore.net";
      public DateTime CreationDate => DateTime.Now;
      public string CoinBaseText { get; set; }
      public List<GenesisBlock> Networks { get; set; }
   }

   class GenesisBlock
   {
      public GenesisBlock(string network, Block block)
      {
         Network = network;        
         Time = block.Header.Time;
         Nonce = block.Header.Nonce;
         Bits = block.Header.Bits.ToCompact().ToString("X2");
         Version = block.Header.Version;
         Hash = block.Header.ToString();
         HashMerkleRoot = block.Header.HashMerkleRoot.ToString();
      }

      public string Network { get; set; }
      public uint Time { get; set; }
      public uint Nonce { get; set; }
      public string Bits { get; set; }
      public int Version { get; set; }
      public string Hash { get; set; }
      public string HashMerkleRoot { get; set; }
   }

   class Program
    {
        static void Main(string[] args)
        {
         Console.WriteLine(BlockcoreLogo.GetAsciiLogo("Genesis Block Generator v1.0"));

         if (args.Length == 0)
         {
            Console.WriteLine("You must supply one, and only one argument, which is the genesis coinbase text.");
            Console.WriteLine("Example: 'Blockcore.Generator The Times 03/Jan/2009 Chancellor on brink of second bailout for banks'");
            Console.ReadLine();
            return;
         }

         string coinbasetext = string.Join(' ', args);

         Console.WriteLine($"Generating new set of genesis blocks with text: \"{coinbasetext}\"");
         Console.WriteLine("This operation might take a while, the output file is saved when everything is completed.");
         Console.WriteLine();

         List<GenesisBlock> networks = new List<GenesisBlock>();

         Console.WriteLine("Generating Main Genesis Block...");
         Block block = Network.MineGenesisBlock(new PosConsensusFactory(), coinbasetext, new Target(new uint256("00000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff")), Money.Zero);
         networks.Add(new GenesisBlock("Main", block));

         Console.WriteLine("Generating RegTest Genesis Block...");
         block = Network.MineGenesisBlock(new PosConsensusFactory(), coinbasetext, new Target(new uint256("0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff")), Money.Zero);
         networks.Add(new GenesisBlock("RegTest", block));

         Console.WriteLine("Generating Test Genesis Block...");
         block = Network.MineGenesisBlock(new PosConsensusFactory(), coinbasetext, new Target(new uint256("000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff")), Money.Zero);
         networks.Add(new GenesisBlock("TestNet", block));

         System.IO.File.WriteAllText("genesis.json", JsonSerializer.Serialize(
            new GeneratorOutput
            {
               CoinBaseText = coinbasetext,
               Networks = networks
            },
            new JsonSerializerOptions
            {
               PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
               WriteIndented = true
            }));

         Console.WriteLine("Generation completed, output written to genesis.json");
         Console.WriteLine("Press any key to exit.");
         Console.Read();
        }
    }
}
